@model CampusEats.Web.Models.Notification.NotificationsViewModel

@{
    ViewData["Title"] = "Notifications";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Notifications</h1>
        @if (Model.Notifications.Any(n => !n.IsRead))
        {
            <button type="button" class="btn btn-outline-primary" onclick="markAllAsRead()">
                Mark All as Read
            </button>
        }
    </div>

    <div class="card">
        <div class="card-body">
            @if (!Model.Notifications.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-bell-slash display-1 text-muted"></i>
                    <h3 class="mt-3">No notifications</h3>
                    <p class="text-muted">We'll notify you when there's something new</p>
                </div>
            }
            else
            {
                <div class="notifications-list">
                    @await Html.PartialAsync("_NotificationsList", Model.Notifications)
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Connect to SignalR hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect()
            .build();

        // Join user's notification group
        connection.start().then(() => {
            const userId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
            connection.invoke("JoinUserGroup", userId);
        });

        // Handle real-time notification updates
        connection.on("UpdateNotificationCount", (count) => {
            document.getElementById("notification-badge").textContent = count;
            if (count === 0) {
                document.getElementById("notification-badge").style.display = "none";
            } else {
                document.getElementById("notification-badge").style.display = "block";
            }
        });

        // Handle mark as read
        function markAsRead(id) {
            fetch(`/Notification/MarkAsRead/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.querySelector(`[data-notification-id="${id}"]`)
                        .classList.remove('unread');
                }
            });
        }

        // Handle mark all as read
        function markAllAsRead() {
            fetch('/Notification/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.querySelectorAll('.notification-item.unread')
                        .forEach(item => item.classList.remove('unread'));
                }
            });
        }
    </script>
}