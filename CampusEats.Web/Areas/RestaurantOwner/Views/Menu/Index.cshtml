@using CampusEats.Web.Areas.RestaurantOwner.Models.Menu
<!-- Areas/RestaurantOwner/Views/Menu/Index.cshtml -->
@model MenuListViewModel

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Menu Management</h1>
        <a asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add Menu Item
        </a>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (!Model.MenuItems.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-cup-straw display-1 text-muted"></i>
            <h3 class="mt-3">No Menu Items</h3>
            <p class="text-muted">Start adding items to your menu!</p>
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add First Item
            </a>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var item in Model.MenuItems)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name"
                                 style="height: 200px; object-fit: cover;">
                        }
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h5 class="card-title mb-0">@item.Name</h5>
                                <div class="form-check form-switch">
                                    <input class="form-check-input toggle-availability" type="checkbox"
                                           data-item-id="@item.ItemId" @(item.IsAvailable ? "checked" : "")>
                                </div>
                            </div>
                            <p class="card-text text-muted small">@item.Description</p>
                            <h6 class="mb-3">฿@item.Price.ToString("N2")</h6>
                            <div class="btn-group">
                                <a asp-action="Edit" asp-route-id="@item.ItemId"
                                   class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-pencil"></i> Edit
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger"
                                        onclick="confirmDelete(@item.ItemId, '@item.Name')">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                        <div class="card-footer text-muted small">
                            <i class="bi bi-clock"></i>
                            Last updated: @(item.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ??
                    item.CreatedAt.ToString("MMM dd, yyyy HH:mm"))
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete "<span id="deleteItemName"></span>"?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <form id="deleteForm" asp-action="Delete" method="post">
                    <input type="hidden" id="deleteItemId" name="id" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Toggle availability
        document.querySelectorAll('.toggle-availability').forEach(toggle => {
            toggle.addEventListener('change', async function() {
                const itemId = this.dataset.itemId;
                const isChecked = this.checked;

                try {
                    const response = await fetch(`/RestaurantOwner/Menu/ToggleAvailability/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const data = await response.json();
                    if (!data.success) {
                        this.checked = !isChecked;
                        showToast(data.message || 'Failed to update availability', 'error');
                    } else {
                        showToast('Menu item availability updated successfully', 'success');
                    }
                } catch (error) {
                    this.checked = !isChecked;
                    showToast('An error occurred', 'error');
                }
            });
        });

        // Delete confirmation
        function confirmDelete(itemId, itemName) {
            document.getElementById('deleteItemId').value = itemId;
            document.getElementById('deleteItemName').textContent = itemName;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        // Toast notification
        function showToast(message, type = 'success') {
            const toast = Object.assign(document.createElement('div'), {
                className: `toast align-items-center text-white bg-${type} border-0`,
                role: 'alert',
                'aria-live': 'assertive',
                'aria-atomic': 'true'
            });

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;

            const container = document.querySelector('.toast-container')
                || Object.assign(document.createElement('div'), {
                    className: 'toast-container position-fixed top-0 end-0 p-3'
                });

            if (!document.body.contains(container)) {
                document.body.appendChild(container);
            }

            container.appendChild(toast);
            new bootstrap.Toast(toast).show();
        }
    </script>
}