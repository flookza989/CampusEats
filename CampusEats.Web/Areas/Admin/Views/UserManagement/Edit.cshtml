@model CampusEats.Web.Areas.Admin.Models.User.EditUserViewModel

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Edit User</h1>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form asp-area="Admin"
                          asp-controller="UserManagement"
                          asp-action="Edit"
                          method="post">

                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="UserId" />
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                        <div class="mb-3">
                            <label asp-for="FullName" class="form-label">Full Name</label>
                            <input asp-for="FullName" class="form-control" />
                            <span asp-validation-for="FullName" class="text-danger"></span>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="Username" class="form-label">Username</label>
                                <input asp-for="Username" class="form-control" readonly />
                                <span asp-validation-for="Username" class="text-danger"></span>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="Email" class="form-label">Email</label>
                                <input asp-for="Email" class="form-control" />
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="Phone" class="form-label">Phone</label>
                                <input asp-for="Phone" class="form-control" />
                                <span asp-validation-for="Phone" class="text-danger"></span>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="UserType" class="form-label">User Type</label>
                                <select asp-for="UserType" class="form-select"
                                        asp-items="@(new SelectList(Enum.GetNames(typeof(CampusEats.Core.Enums.UserType))))">
                                </select>
                                <span asp-validation-for="UserType" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input asp-for="IsActive" class="form-check-input" disabled="@(Model.UserType == "Staff")" />
                                <label asp-for="IsActive" class="form-check-label">Active Account</label>
                            </div>
                            <span asp-validation-for="IsActive" class="text-danger"></span>
                        </div>

                        <hr />

                        <div class="mb-3">
                            <label class="form-label">Change Password (optional)</label>
                            <input type="password" name="NewPassword" class="form-control"
                                   placeholder="Leave blank to keep current password" />
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-danger"
                                    onclick="confirmDelete(@Model.UserId)">
                                <i class="bi bi-trash"></i> Delete User
                            </button>
                            <div>
                                <a asp-action="Details" asp-route-id="@Model.UserId"
                                   class="btn btn-outline-secondary me-2">Cancel</a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save"></i> Save Changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Account Information</h5>
                    <div class="mb-3">
                        <small class="text-muted">Created Date</small>
                        <p>@Model.CreatedAt.ToString("dd MMMM yyyy")</p>
                    </div>
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> Staff accounts cannot be deactivated.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function showToast(message, type = 'success') {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: type === 'success' ? '#28a745' : '#dc3545',
                stopOnFocus: true,
                close: true
            }).showToast();
        }

        async function confirmDelete(userId) {
            const checkResponse = await fetch(`/Admin/UserManagement/CanDelete/${userId}`);
            const checkResult = await checkResponse.json();

            if (!checkResult.canDelete) {
                showToast('This user cannot be deleted due to existing orders or role restrictions.', 'error');
                return;
            }

            if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                try {
                    const response = await fetch(`/Admin/UserManagement/Delete/${userId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const data = await response.json();
                    if (data.success) {
                        showToast('User deleted successfully');
                        setTimeout(() => {
                            window.location.href = '@Url.Action("Index")';
                        }, 1000);
                    } else {
                        showToast(data.message || 'Failed to delete user', 'error');
                    }
                } catch (error) {
                    showToast('An error occurred while deleting user', 'error');
                }
            }
        }

        $(document).ready(function () {
            $('form').submit(function (e) {
                if (!$(this).valid()) {
                    showToast('Please check the form for errors', 'error');
                    return false;
                }
                return true;
            });
        });
    </script>
}